=================================================================================================
    Some information on the waveform files for Xerox W-series heads.

    Note that this information is about how to configure / use waveform files.
    The intenal details of the waveform file / head configuration RAM contents is out of this
    document scope.

=================================================================================================


----- some preconditions

    * we support only binary (1BPP) printing. 
    * The head NVRAM (see below) must contain only 1 waveform. Otherwise the error is logged and printing disabled.



----- Normal system usage, real life scenario.

In normal circumstances all necessary information (waveform, all head configuration data) is extracted from 
head NVRAM and used to set the system up. This assumes that the head NVRAM must be valid.
No need to specify waveform file names and index:

    - Waveform* = "....." keys in [Xerox_W] are not required
    - WaveformFileIdx  key should either be not defined or set to 0, which means "use WF data from the head NVRAM"


On head power up NVRAM data extracted from the head, downloaded to PC and parsed. All (and only) necesssary information is
extracted, converted to Meteor XeroxW waveform file.
Meteor XeroxW waveform file then parsed, analog WF information is sent to HDC WF RAM, the rest of the information is 
converted to head RAM data and sent to the head.
From the user point of view this operation is absolutely transparent.

There are some parameters that can be adjusted in config file (they may disappear in the future)
    [Xerox_W]
    DisableWRam = 0  ;-- if not 0, all WaveRam entries will be set to 0. This is for experimenting with weird waveforms 
    SaveNvRam   = 1  ;-- if not 0, head NVRAM image will be saved (may be useful for debugging)    

--

"DisableWRam = 1" fills head WaveRam with all 0s instead if a real WF data. This may be useful when it is 
required to prevent analog WF voltages use by the head (debugging amplifiers etc.). 

--

"SaveNvRam = 1" causes saving head NVRAM image to "PCC_DownloadedLogs" subdirectory in Meteor config file directory.
The file name will be "PCC#_XeroxNVRam.bin", where '#' is PCC/PDC number[1..254]

--
Also, auto-generated WF files in Meteor format are placed in this folder. Their names will be:
"PCC#_Xerox_Waveform.txt", where '#' is PCC/PDC number[1..254]

-- 
Working waveform and corresponding WaveRAM control signals can be exported in GNU-Plot format into the 
sub-directory "WfLiveInfo". The file name should look as follows: "WaveRamInfo_01-01-01-01.txt".
"01-01-01-01" means PCC:1, HDC:1, Head:1, JA:1
This may be useful for some sort of WF analysis.

Also, analog working and tickling waveforms data will be exported to the file with the name: "WaveformInfo_01-01-01-01.txt"
This would allow checking working/tickling waveforms relationships.


This feature is disabled by default. To enable it  "LiveWfExport = 1" key should be placed in [DefaultParameterValues], 
[ControllerX], [HeadDriverX] sections

    
----- abnormal system usage, using custom WF files.

As it was mentioned earlier, all neccessary head/HDC configuratin information is contained in Meteor XeroxW "waveform file". 
So, it is possible to ignore NVRAM head data and instead use a custom WF file.
To achieve this, WF file name should be listed in 'Waveform* = "....."' key in [Xerox_W], and WaveformFileIdx key
should contain a valid non-zero index.
There is a sample WF file: "Sample_WSeries_Bin_WF.txt" in the corresponding waveform directory, but it is not 
guaranteed to do anything useful, because a lot of config. data sections contain default values, that may be different 
for the real calibrated head.

NB! Also, using custom WF file can be a bit dangerous: the head itself may have a number of "disabled nozzles", which 
must not be driven. Our FPGA masks print data for the specified nozzles. And the list of them is stored in head NVRAM.
The sample WF file contains an empty list, so, ALL nozzles will be driven by default.

Of cause, one can perform a surgery by editing the WF file, taking bits and pieces from other (e.g. auto-generated) 
WF files etc. But it is strictly not recommneded.


----- Tickling 
There is some general info in one of the TechNotes: "TicklingAndSpitting.txt"
For this particular head type it is also possible to enable idle tickling. 
There is no need to additionally provide special tickling waveform, because it will be automatically generated
from whatever working WF is being used. This waveform will be played when there is no encoder puses.

Tickling WF is generated by simply scaling down working WF (with keeping pulses' slew rates), i.e. just by reducing
WF pulses' amplitude. 
Current scaling method is: All waveform timings are kept unchanged, all voltages and slew rates are scaled down.


As soon as all tickling WF important timings remain the same as for the working one, Xerox WaveRam and all other
internal head settings do not change at all, PDC FPGA just starts playing Tickling analog waveform instead of working one.

The scaling coefficient sholuld be in a range [0.1, 1.0] and its default value is 0.33
It is possible to change the scaling coefficient by using following key in the config file:

    ;-- coefficient for scaling down working analog waveform to get a tickling one (for idle tickling) 
    WorkToTickleWfScaleCoeff = 0.33 ;-- default value


This parameter can be used in [DefaultParameterValues], [ControllerX], [HeadDriverX] sections.
It can be also changed via SetParamEx() API, the parameter is: CPEX_WorkToTickleWfScaleCoeff.

If logging category "Waveforms" is enabled, on StartJob() PrintEngine log will contain following lines:

    ....
    # Work to Ticlke WF scaling coefficient for[PCC:1,HDC:1] is 0.330
    # Working  WF MinV:-33.20, MaxV:33.20
    # Tickling WF MinV:-10.96, MaxV:10.96
    ....

This might make tuning tickling WF scaling coefficient easier. It is currently unknown how large tickling WF
amplitude shoud be. On the one hand it should agitate ink in nozzles, on the other - it shouldn't ject ink.
So, some tuning is possibly required depending on a working waveform, ink type, working ink temperature and so on.









