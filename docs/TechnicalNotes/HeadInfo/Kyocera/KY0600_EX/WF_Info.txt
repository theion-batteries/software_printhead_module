=================================================================================================
    Some information regarding Kyocera KY0600_EX head waveforms and similar data
=================================================================================================


-------------------------------------------------------------------------------------------------
--- Saving waveform and other data downloaded from the head on power on.
-------------------------------------------------------------------------------------------------


This feature is enabled by key "SaveWaveformData" in the ['Head'] section of the config file, e.g

    [KY0600_EX]
    SaveWaveformData = 1 ;-- 1 enables saving waveforms/other data to the file.

Waveforms are saved into the directory that is specified by optional parameter
    [Test]
    PccUploadLogsPath = "PCC_DownloadedLogs" ; default value

Its default value is \Config\PCC_DownloadedLogs
    
The waveform file name looks as follows: "KY0600_EX_Waveform[Pcc1_Hdc1].txt"
I.e. file name containd PCC/HDC number. You can find head serial number and a timestamp in the file.

Note that waveforms etc. are saved every time the head is powered overwriting existing files. 



-------------------------------------------------------------------------------------------------
--- Waveforms configuration:
-------------------------------------------------------------------------------------------------

In the simplest case nothing needs to be configured, so, wavefoms stored in the head EEPROM will be used.
It is possible to override default waveforms that are stored inside Kyocera head.  
Meteor software can load waveform data from a file and it is uploaded to the head, overwriting the existing one. 


If it is nesessary to specify WF that is different from one stored in the head, then Meteor config file
shoud contain following information:
    
    * Path to the waveform file(s) in [KY0600_EX] section (upto 100 files in total) E.g:
        [KY0600_EX]

        Waveform1 = "Waveform\Kyocera\KY0600_EX\KY0600_EX_SampleWaveform_1.txt"  ; Sample waveform file 
        Waveform2 = "Waveform\Kyocera\KY0600_EX\KY0600_EX_SampleWaveform_2.txt"  ; Sample waveform file 


    * Index of the WF file to be used to select Wf file. Index value is [0..100].
      Default index value 0 has a special meaning: "use default waveforms stored in the Kyocera head", don't use WF file.  
      Index values [1..100] correspond to Waveform1..Waveform100 file name keys.
      E.g:      

        [DefaultParameterValues]
        WaveformFileIdx = 0 ;Global default value, "0" means using WFs stored in the head.
     
        [HeadDriver1:1]
        WaveformFileIdx = 1  ; WF file index for PDC1:Head1
        
      In this example whole system will use WF file index 0 apart from a head on PCC1:HDC1 that will use 
      WF file with index 1.

        [Controller1]
        WaveformFileIdx = 1,2  ; WF file indices for PDC1:Head1 and PDC1:Head2 respectively
        

    * It is also possible to select the waveform by changing KPEX_WF_FileIdx parameter via SetParamEx() API.
      New waveform will be used after StartJob() command.  


--- notes on WF file format.

    The simplest way to see Meteor WF file format for this head is to download WF file from the head (see above) and
    open it in any text editor.
    An example of such file contents:

    ------------------------
    [Generic]           ;-- this this a header section with verrsion etc. information
    HeadType=KY0600_EX
    Version=1

    [WaveformData] ;-- this is the section with the WF data itself

    ;-- This dump must contain exactly 455 bytes of data in HEX format.
    ;-- FIRE1 data:
    A4 01 B0..... 
    .....
    ;-- FIRE7 data:
    A5 00 A5.... 
    ------------------------


    Waveform for this head type is made of 7*64 == 448 bytes. Whole head waveform consists of FIRE1..FIRE7 sub-vaweforms,
    64 bytes each. 

    For the reasons unknown Kyocera distributes waveform for this head type as a set of seven files "Fire1.txt".."Fire7.txt"
    Every file contains a hex(!) dump of a sub-waveform data (64 bytes) and the 65th byte is a checksum.
    Thus, in total the whole WF dump must contain 65*7 == 455 bytes.
    
    If you want to use WF data distributed by Kyocera, you will have to convert it to Meteor WF file format.
    Step-by-step instruction if you want to do it by hand:

    1. Download and save existing WF from the head (see above), it's important, because this information in the 
        head will be overwritten permanently.

    2. Copy/rename this Meteor WF file with the name you want.
    3. Remove all existing data from [WaveformData] section
    4. Copy there all data from "Fire1.txt".."Fire7.txt" Kyocera files. Note that the order of sub-waveforms data
        from "Fire1.txt".."Fire7.txt" files is important, i.e. real WF is made of merged contents of 
        "Fire1.txt".."Fire7.txt" files.

    Or you can write a simple script that generates Meteor WF file from Kyocera's "Fire1.txt".."Fire7.txt" files.
    
   
    Then specify this WF file in Meteor config file, as described above. The WF will be written to the head 
    on head power up.
    
    
-------------------------------------------------------------------------------------------------
-- "PrintUnit delays" file
-------------------------------------------------------------------------------------------------

"PrintUnit delay" information is stored in the head and can also be changed similarly to the way waveforms are processed.
If "SaveWaveformData" feature is enabled, "PrintUnit delay" information will be downloaded from the head and written
to the file. This information consists of 4*32 = 128 data items (16-bits wide from the user point of viee). Each value 
should be in a range [0..511].
"PrintUnit delay" file format is very similar to the waveform file, but [DelaySettingData] section must 
contain 128 values in DECIMAL format.


If it is nesessary to specify "PrintUnit delay" data that is different from one stored in the head, then Meteor config file
shoud contain following information:
    
    * Path to the "FlagData" file(s) in [KY0600_EX] section (upto 100 files in total) E.g:
        [KY0600_EX]
        FlagDataFile1 = "Waveform\Kyocera\KY0600_EX\KY0600_EX_DelaySetting.txt" ; Sample nozzle adjust file
        
    * Index of the "FlagData" file to be used. Index value is [0..100].
      Default index value 0 has a special meaning: "use default data stored in the Kyocera head"
      Index values [1..100] correspond to FlagDataFile1..FlagDataFile100 file name keys.
      E.g:      

        ;--- settings specific for PDC1:HDC1 (Head2 on PDC1)
        [HeadDriver1:2]
        FlagDataFileIdx = 1 ;-- specifies file with "PrintUnit delays"



-------------------------------------------------------------------------------------------------
--  Using palette
-------------------------------------------------------------------------------------------------

    Palette allows remapping source greyscale values[0..7], 3BPP to 4-bit head data that is actually printed.
    Default mapping is 1:1, i.e GSLevel0->0, GSlevel1->1 ... GSlevel7->7.
    It is posssible to change this mapping by modifying KPEX_PltRegVal parameter from the config file or 
    via SetParamEx() API.
    The default value of this parameter is 0x76543210, which gives 1:1 mapping as described above (unsupported values ignored).
    Config file parameter name is "PltRegVal" and it can be used in [DefaultParameterValues], [ControllerX], [HeadDriverX:Y]
    sections. 
    
    Parameter in [DefaultParameterValues] defines value for WHOLE system.
    Parameters in [ControllerX] section allow overrinding value for every HDC on a PCC:X. It is required to specify 
    a list of 2 values, each one for individual HDC.

    Parameter in  [HeadDriverX:Y] section sets the value for particular head on PCC:X, HDC:Y



    An example (see head datasheet as well): 
    The head comes with 3BPP waveform that has following definitions:

    ---------------------------------
    Fire1       Small drop
    Fire2       Large drop
    Fire3       Middle drop
    Fire4       Large drop
    Fire5       Extra Large drop
    Fire6       Blank * Meteor uses "Fire6" value for "Tickling"
    Fire7       Blank
    ---------------------------------

    This 3BPP mode uses FIRE1..FIRE5 and the palette definition looks as follows: 

        [Controller1]

        PltRegVal = 0x55543210
        ;             |.. ||||   
        ;             |   |||+-- value for GSLevel 0    (nibble 0) "No Fire"
        ;             |   ||+--- value for GSLevel 1    (nibble 1) "Fire1", small drop
        ;             |   |+---- value for GSLevel 2    (nibble 2) "Fire2", large drop
        ;             |   +----- value for GSLevel 3     ....                           
        ;             |  ......
        ; !Spit GL -> +--------- value for GSLevel 7    (nibble 7) "Fire5",  Extra large drop                          

        -- Note on "PltRegVal" format: This parameter (palette) is represented by a single 32-bit value. This value in turn 
        is made of 8 "nibbles" 4 bits each (see the drawing above). Thus, each nibble specifies the print data value.
        A nibble is made of 4 bits and Meteor in general suppports true 4 BPP, so, in theory, it is possible to use
        value 0x0-0xF in hex or 0..15 in decimal as a palette entry. But as soon as this head supports only 3 BPP maximum, 
        meaningful values are [0..7] only. Using values greater than 7 is not recommended.         
        
        This explains why in the config file palette is defined as a 32-bit hexadecimal number (starting with prefix '0x'). 


        ! Note on spitting: Meteor uses highest palette entry7 (value in nibble7) for the spitting.
        That explains why in the example above nibble7 has a value 5, it is "Fire5", extra large drop.
        If you use hardcoded default palette value 0x76543210, then "Fire7" will be selected for spitting, but
        it is not mapped to anything in the head, so, it won't spit





