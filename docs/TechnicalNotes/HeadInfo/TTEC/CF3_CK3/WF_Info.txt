=================================================================================================
Some information regarding TTEC CF3/CK3 waveforms    
=================================================================================================



We currentlty assume that:

    * CF3/CK3 heads have 2 modules or "Jetting Assemblies" (JA) 
    * Every JA on the head can have its own voltages (VAAP, VAAN) and waveforms.
    


--- Head voltages configuration:

    As mentioned above, each JA can have its own voltages (VAAP, VAAN). Head voltages are not part of the 
    waveform and they can be specified in the Meteor config file.
    If no voltages specified in config file, default values are used (VAAP=12.0v, VAAN=-12.0V)
    Head voltages can be specified on System/PCC/HDC/Head levels in the config file.
    
    Configuration example:

    [HeadDriver1:1]       ;--- HDC level 
    VAAP = 12.1,  12.2    ; VAAP voltages for PCC:1, HDC:1, heads 1 and 2 respectively
    VAAN = -12.3, -11.9   ; VAAN voltages for PCC:1, HDC:1, heads 1 and 2 respectively


    [Head1:1:1]           ;--- Head level 
    VAAP = 12.6,  12.7    ; VAAP voltages for PCC:1, HDC:1, Head:1, JA1 and JA2 respectively
    VAAN = -12.8, -11.3   ; VAAN voltages for PCC:1, HDC:1, Head:1, JA1 and JA2 respectively


--- Temperature-voltage compensation.

    CF3 head has temperature sensors inside and they can be used to automatically adjust head voltages
    depending on the ink temperature.                          
    In more detail: The head has 2 halves, "JettingAssemblies" or JAs in our terminology. 
    For the head we have in our lab, each JA has 2 thermistors, though some head revisions may have one (??).
    (in our case the highest temperature reading is selected as "JA temperature").
    So, each JA has a temperature associated with it and 2 voltages: VAAP, VAAN. _AMPLITUDE_ of these
    voltages can be made dependant on JA temperature in a given temperature range.
    If this mode is enabled, JA voltages calculated as follows:

    VjaResult = VjaSet +  (TdegC - 45.0degC)*TGragient 
    where
    
    VjaSet:     JA's VAAP or VAAN voltage set in the config file or by SetParamEx() API
    TdegC:      JA's temperature in degrees C
    45.0:       head reference temperature, degrees C    
    TGragient:  A coefficient that defines temperature->voltage dependency. 
                Its value depends on ink type, but -0.15 V/DegC can be used as a reference value.

    VjaResult:  Adjusted VAAP or VAAN

    Temperature-voltage compensation works only when head temperature is in the range [40, 50] degrees C.
    This mode is controlled by a single parameter in the config file:
    "Gradients"; its range is [0..-0.5], default value is 0, which means "turned OFF"
    The scope of this parameter is the same as VAAP,VAAN, i.e. it can be applied down to individual JA.
    For example:   

        [DefaultParameterValues]
        VAAP = 12.0 
        VAAN = -12.0 
        Gradients = -0.15 ; Head temperature/voltage compensation coefficient, V/DegC 

    All heads in the system have settings: VAAP=12.0v, VAAN=-12.0v.
    But when head temperature reaches +40C, then the voltages will be automatically adjusted to:
    VAAP=12.75v, VAAN=-12.75v.      
    For ref. temperature 45.0C: VAAP=12.0v, VAAN=-12.0v.
    For +49C: VAAP=11.4v, VAAN=-11.4v.      



--- Waveforms configuration:
    * As mentioned above, each JA can have its own waveform.
    * Waveforms data is stored files, e.g. "CF3_300DPI_SampleWF.txt"
    * These file names/paths are listed in "head section". e.g [TTEC_CF3]
    * Concrete WF file file is selected by "Waveform file index" parameter. 
        E.g. "WaveformFileIdx = 1". Its default value is 1.

    * Each CF3/CK3 vaveform file can contain several waveforms [1..128]. And the concrete waveform IN THE FILE is
        selected by "Waveform index in the file" parameter.  E.g. "WaveformIdxInFile = 1". Its default value is 1.

    Thus, in order to select waveform to be loaded to the JA, it is nececessary to specify 2 parameters: WF file index and 
    index of the waveform in the file. 
    
    Configuration example:

    [TTEC_CF3] ;-- "head" section
    Waveform1 = ".\Waveform\TTEC\CF3_300DPI_SampleWF.txt" ;-- file1, contains several waveforms
    Waveform2 = ".\Waveform\TTEC\CF3_600DPI_SampleWF.txt" ;-- file2, contains several waveforms


    [HeadDriver1:1]           ;--- HDC level 
    WaveformFileIdx   = 1, 2  ; PCC:1, HDC:1, Head1 uses "CF3_300DPI_SampleWF.txt" and Head2 uses "CF3_600DPI_SampleWF.txt"
    WaveformIdxInFile = 4, 5  ; PCC:1, HDC:1, Head1 uses WF number 4 from its file and Head2 uses WF number 5 from its file

    [Head1:1:1]               ;--- Head level 
    WaveformIdxInFile = 3, 7  ; PCC:1, HDC:1, Head:1, JA:1 uses WF number 3, PCC:1, HDC:1, Head:1, JA:3 uses WF number 7
    

    Note: This is just an example. It is not possible to use waveforms with different parameters (grayscale/bitary, cycle order)
    within one HDC. 


--- Waveforms restrictions and obscured features:

    * It is not possible to use waveforms with different parameters (grayscale/bitary, cycle order) within one HDC. 
      Thus, 2 heads on the same HDC should have similar waveforms.

    * Internal head print data format for binary printing (1BPP) and grayscale printing (2,3 BPP) is different.
      So, TTEC uses different waveforms for binary and grayscale printing. Waveform fields R2,R3 should be (0xAF, 0x01) for 
      GS and (0x00, 0x6B) for binary. If Meteor finds out that sepected BPP doesn't match waveform used, it logs an error.
      
    * CF3 is an A-B-C head, and can print accurately only with a limited XDPI values, like 300,600,1200 DPI and such.
      For weird XDPI values it is not possible to have accurate nozzle positions.

    * When doing scanning print job, Meteor and HDC FPGA will automatically adjust waveform data internally to match direction of 
      printing.


--- Waveform file format notes:

    A little bit strange waveform file format can be explained by the way WF data are distributed: an excel spreadsheet where
    each column of data represents whole WF registers array (R1..R296, 296 bytes) and there can be several colums on one sheet.

    * it is possible to have blank lines and comments starting from ';' character at the beginning of the file
    * data items in the file (bytes in hex representation) can be separated by spaces, tabs and commas. I.e. CSV format is OK.
    * Each column of data represents a single waveform data array (R1..R296, 296 bytes) and must contain exactly 296 lines.
    * Its is possible to have several colums (1..128) of data in the file. I.e. WF file can contain upto 128 waveforms.
    * It is possible to have an optional very first column with registers names R2..R296. It is ignored.  
    * a data item is a byte in hex. Acceptable forms are: "0, 0F, 0x03, 0xA"    

    For real WF files examples take a look at files in CF3 waveform directory.
        
    Original waveforms are supplied in in Excel spreadsheet format and can be organised differently (2 dimentional table, 
    some number of single dimentional tables), so, it might be necessary to convert WF data from Excel format to the one 
    described above. This is fairly simple: Select data items from the table in Excel (not whole sheet), copy it to clipboard 
    and simply paste to the text file. Be careful not to leave unnecesary information (like columns names) in the waveform 
    file. Also note that the individual WF data bytes should be organised in columns.



=================================================================================================
Head "Flag Data"
=================================================================================================
    
    * This feature is currently supported by CF3 head only.
    * This feature is optional and head specs currently don't explain anything about what the actual data should be,
      thus, default "flag data" files contain only zeroes.

    "FlagData" can be sent to the head and can be used for controlling pixel "volume OR position" (FlagData Type1) or both 
    pixel "volume AND position" (FlagData Type2). See head specs for more technical detail.
    
    The way Meteor supports head FlagData is:
    - upon head initialisation that is usually happen on head power Up, flag data array (if present) is send to the head along
      with waveform data. 

    By default sending FlagData is not configured in and therefore it is not used.
    In order to allow sending FlagData it is necessary to:
        * provide a "FlagData" file that contains the data itself.
        * configure which  "FlagData" file will be associated with a particular head in the system. It is 
          very similar to the way Wafeform files being configured.
    
    Sample "FlagData" files can be found in the same directory with waveform ones:
        CF3_FlagData_Type1.txt  for FlagData type1
        CF3_FlagData_Type2.txt  for FlagData type2

    Every file  contains a header that describes the data (Head type, file verson and data type) and a hex dump of 
    exactly 1278 bytes representing FlagData. Dump data item is a byte in hex. Acceptable forms are: "0, 0F, 0x03, 0xA".
    They can be separated by commas, spaces or tabs.

    In order to allow loading FlagData for a particular head it is required to make following changes in a Meteor 
    config file:

    * Head section should list path to the FlagData file (similarly to WF file). It is possible to have up to 
      40 such files. For example:

        [TTEC_CF3]
        FlagDataFile1 = ".\Waveform\TTEC\CF3_FlagData_Type1.txt"
        FlagDataFile2 = ".\Waveform\TTEC\CF3_FlagData_Type2.txt"
        FlagDataFile3 = ".\Waveform\TTEC\CF3_SomeOtherFlagData_Type1.txt"

    * It is necessary to configure which head is using which FlagData file. For this "FlagDataFileIdx"
    key is used. Its value can be [0..40]. Value "0" is default and means "Do not use FlagData".
    Values [1..40] is an index in "FlagDataFile*" array of keys. 
    "FlagDataFileIdx" key can be placed in [DefaultParameterValues], [ControllerX], [HeadDriverX:Y] sections
    and works very similar to "WaveformFileIdx".   
    
    For example: 
    [DefaultParameterValues]
    FlagDataFileIdx = 1 ; Every head in whole system will use FlagData file with index 1


    [HeadDriver1:1]           ;--- HDC level 
    FlagDataFileIdx   = 1, 3  ; PCC:1, HDC:1, Head1 uses "CF3_FlagData_Type1.txt" and Head2 uses "CF3_SomeOtherFlagData_Type1.txt"

    [HeadDriver1:2]           ;--- HDC level 
    FlagDataFileIdx   = 0, 2  ; PCC:1, HDC:2, Head1 doesn't use flag data and Head2 uses "CF3_FlagData_Type2.txt"
        

    Note: It is not possible to mix type1 and type2 Flag data within same HDC. I.e. Head1 and Head2 should must the same
    flag data type (or no FlagData) and setting "FlagDataFileIdx = 1, 2" for the example above is invalid.


    
=================================================================================================
Getting real head voltages / temperatures
=================================================================================================
The real (measured) values of heads voltages and temperatures are displayed in "Monitor" program, "Status" tab, HDC/Head status
listbox.
User application can also obtain these values as a part of TAppHeadStatus structure via PiGetHeadStatus() or PiGetStatusEx() API.

Fields of TAppHeadStatus structure map to the real objects data as follows:

--- Head temperature is in degrees C multipiled by 10
TAppHeadStatus::Temperature1    [Hd1, JA1: T1]
TAppHeadStatus::Temperature2    [Hd1, JA2: T1]
TAppHeadStatus::Temperature3    [Hd1, JA1: T2]
TAppHeadStatus::Temperature4    [Hd1, JA2: T2]
TAppHeadStatus::Temperature5    [Hd2, JA1: T1]
TAppHeadStatus::Temperature6    [Hd2, JA2: T1]
TAppHeadStatus::Temperature7    [Hd2, JA1: T2]
TAppHeadStatus::Temperature8    [Hd2, JA2: T2]


TAppHeadStatus::HeaterPwm contains HDC PSU1 and PSU2 temperatures.
    PSU2 temperature (multipiled by 10) in higher 16 bits and PSU1 temperature in lower 16 bits.


--- Head voltages are in volts multipiled by 10
TAppHeadStatus::Voltages[0]     [Hd1, JA1: VAAP]   
TAppHeadStatus::Voltages[1]     [Hd1, JA2: VAAP]
TAppHeadStatus::Voltages[2]     [Hd1, JA1: VAAN]
TAppHeadStatus::Voltages[3]     [Hd1, JA2: VAAN]
TAppHeadStatus::Voltages[4]     [Hd2, JA1: VAAP]
TAppHeadStatus::Voltages[5]     [Hd2, JA2: VAAP]
TAppHeadStatus::Voltages[6]     [Hd2, JA1: VAAN]
TAppHeadStatus::Voltages[7]     [Hd2, JA2: VAAN]



    
    



