=================================================================================================
Some information regarding Xaar2001 waveforms    
=================================================================================================

We currentlty assume that:

    * HDC-H2001 drives one Xaar2001/2002 head.
    * Xaar2001 head is basically "made of" 2 Xaar1001 (HSS) heads.
    * Thus, every half of the head receives its own waveform.
    * Whole WF is appplied to BOTH nozzle rows (JAs) on the head half A or B
    * each nozle row (JA) is handled by 8 ASICs, each one can have its own driving voltage. 
        Thus, there are 32 voltages per whole head.
        

--- Waveforms configuration:

  - use standard Xaar2001 WF. Waveforms from older head types do not work.
  - Each side of the head (A or B) can have its own WF. But it is not possible to use diffetent WFs for
    individual JAs.
    So, the WF indices should look like (if someone bother specifying different WFs for head sides A&B):         

    [Head1:1]
    WaveformFileIdx = 1,1, 2,2 ; WF file index for JA1,JA2, JA3,JA4 respectively
    
    The result will be: PCC1:HDC1:Head1 side A will use WF file with index 1 , side B will use WF file with index 2.
    WF indices for JA1,JA2 pair and (JA3,JA4 pair) must be the same, otherwise it will result in error.

--- Head voltages configuration:

    As mentioned above, each JA is driven by 8 ASICs ASIC0..ASIC7.
    
    Each ASIC voltage is a sum of:
    Head Initial Voltage (Vi) (one per whole head) + Head voltage Offset (VOffset) (one per nozzle row) + 
    PTrim voltage (one per ASIC)
    
    "Vi"            is mapped to KPEX_HeadVoltage parameter     (21.0 V by default)
    "VOffset"       is mapped to KPEX_HeadVoltageAdj parameter  (0.0  V by default)
    "PTrim[0..7]"   are mapped to KPEX_VoltageTrim0...KPEX_VoltageTrim7 (0.0  V by default)

    Configuration example:

    [HeadDriver1:1]
    HeadVoltage = 21.0 ;--  Vi=21.0v for head1 (HDC drive one head)

    [Head1:1]
    HeadVoltageAdj = 0.0, 0.5, -0.7, 0.8 ;-- 4 values: VOffset for JA1..JA4 respectively
    VoltageTrim0   = 0.1, 0.2, 0.3, 0.4  ;-- 4 values: PTrim for ASIC0 on JA1..JA4 respectively
    VoltageTrim4   = 0.5, 0.6, 0.7, 0.8  ;-- 4 values: PTrim for ASIC4 on JA1..JA4 respectively
    VoltageTrim7   = 0.0, 0.0, 0.0, 0.0  ;-- 4 values: PTrim for ASIC7 on JA1..JA4 respectively (default values)

    It is also possible to use KPEX_HeadVoltage to set the voltage per nozzle row in the [HeadX:Y] section.
    In this case KPEX_HeadVoltageAdj is not needed.
    HeadVoltage entries in the [HeadX:Y:Z] override the HeadVoltage entry in the corresponding [HeadDriverX:Y] 
    section.  There must be four values present.

    For example:

    [Head1:1]
    HeadVoltage = 21.0, 21.5, 20.3, 21.8 ;-- 4 values: voltage for JA1..JA4 respectively

    ---
    ! Note on setting KPEX_HeadVoltage parameter via SetParamEx() API:

        SetParamEx() API will accept addresses specified down to concrete JA (e.g. [4:3:2:1]). 
        In this case the KPEX_HeadVoltage parameter will be applied to JA1 on PCC:4, HDC:3, Head:2.
        In order to set KPEX_HeadVoltage parameter for the WHOLE head, one need to provide address like: [4:3:2:0].
        The '0' is explicitly indicating that all JAs on the head are being addressed.

    ---
    ! Note on incorrect voltages settings:

    As soon as ASIC voltage (VASIC) is a sum of Vi+VOffset+PTrim voltage, it is very dificult to check that VASIC is
    correct on early stage of reading config file. Instead, every VASIC is checked on head power up.
    If resultant VASIC is out of range [5.0, 30.0] volts, then it is ignored and set to default 21.0 volts. 
    It is a good idea to have correct voltages in the config file first, and only then try adjust them with SetParamEx() API.
    An attempt to fix initially incorrect VASIC by adjusting VOffset and PTrim may not work correctly at all and will be ignored.


--- Waveform file format notes:

    WF file format looks like hex dump of data and it is Xaar2001 specific. Waveforms from older head types will not work. 
    PrintEngine supports waveform files with minor improvements:

    * it is possible to have blank lines and comments starting from ';' character at the beginning of the file,
        before data dump starts
    
    * all whitespaces within data dump are ignored, i.e. it is possible to have it split into multiple lines.
        No comments within data dump.



--- Palette (*.plt) file notes:
    It is an optional file that has the same name as WF file, but *.plt extension. If it is found, PrintEngine
    will try to read data from it and load to the appropriate palette registers.
    Palette allows remapping source greyscale values[0..7], 3BPP to 4-bit head data that is actually printed.
    Default mapping is 1:1, i.e GSLevel0->0, GSlevel1->1 ... GSlevel7->7.

    -- PLT file format:

    * It is just standard PrintEngine ini file. It must contain [PaletteData] section and "HeadType" key that 
        specifies the head type. Data payload is optional and it is a list of of comma-separated 8 decimal values. 
        Each value should be in a range [0..15].
        
    For example, the default palette is:
    Data = 0,1,2,3,4,5,6,7
           | ......... | |
           |           | +------- value for GSLevel 7   
           |           +--------- value for GSLevel 6
           |                      ...................
           +--------------------- value for GSLevel 0


    If for some reason the same waveform needs to be associated with different palettes, then it would be necessary to 
    assign waveform files different names and name *.plt files accordingly.


=================================================================================================
Getting real head voltages / temperatures
=================================================================================================

The real (measured) values of head voltages, temperature and other values are displayed in "Monitor" program, 
"Status" tab, HDC/Head status listbox.

The head also provides some internal specific information, like ink temperature, ASIC currents etc. This non-HDC information  
items have "*" prefix in Monitor list, like "*Hd1 ACurr Row1". Meaning of these fields is described in head documentation 
(XaarSMART information).

User application can also obtain these values as a part of TAppHeadStatus structure via PiGetHeadStatus() or PiGetStatusEx() API.

-- Head voltages resolution and precision:
    HDC voltage controller uses 10-bit DAC to form all head voltages. Head max. voltage is 30.0 volts, which gives
    30.0V / 1024 ~= 30mV voltage setting / display resolution. In other words, setting head voltage with less than 30 millivolt
    resolution doesn't make sense. Moreover, voltage setting/keeping precision is even less due to the noise in ADC-DAC 
    control loop. 
    So, the sensible minimum quantum of head voltage is about 50-60 millivolts.



Fields of TAppHeadStatus structure map to the real objects data as follows:

-- HDC voltages / temperatures:
    TAppHeadStatus::Voltages[0]...TAppHeadStatus::Voltages[31] contain all 32 HDC voltages 
    Each array item contains ASIC voltage in low 16 bits
    Each 16 bit value is a positive voltage scaled 100 times, i.e. 0.01v resolution.
    Array layout:
        Voltages[0] -> ASIC0, Nozzle Row1 voltage   
        Voltages[1] -> ASIC1, Nozzle Row1 voltage   
        ...
        Voltages[7] -> ASIC7, Nozzle Row1 voltage       
        
        Voltages[8] -> ASIC0, Nozzle Row2 voltage       
        Voltages[9] -> ASIC1, Nozzle Row2 voltage   
        ...
        Voltages[15]-> ASIC7, Nozzle Row2 voltage       
        ...
        Voltages[31]-> ASIC7, Nozzle Row4 voltage       


        TAppHeadStatus::MiscData[0] -> HDC PSU1 temperature, 10x scaled
        TAppHeadStatus::MiscData[1] -> HDC PSU2 temperature, 10x scaled
        TAppHeadStatus::MiscData[2] -> HDC VRegIn, 100x scaled
        TAppHeadStatus::MiscData[3] -> HDC current, ma

        
-- non-HDC head information. Each value represents some head-specific data in its low 16 bits:

    TAppHeadStatus::Temperature1 -> Ink temperature path1 
    TAppHeadStatus::Temperature2 -> Ink temperature path2 
    TAppHeadStatus::Temperature3 -> ASIC current row1 
    TAppHeadStatus::Temperature4 -> ASIC current row2 
    TAppHeadStatus::Temperature5 -> ASIC current row3 
    TAppHeadStatus::Temperature6 -> ASIC current row4 

    TAppHeadStatus::HeadVoltage  -> VDD1 

    TAppHeadStatus::Temperature7 -> Ready Mask
    TAppHeadStatus::Temperature8 -> Infon Mask

